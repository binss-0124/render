# ✅ **근접 / 원거리 전투 시스템 개선 및 몰입감 향상 작업 계획**

---

## 📌 **1. 시스템 분석 및 환경 정비**

**목표:** 코드 구조를 파악하고 리소스 폴더 및 개발 환경을 준비합니다.

* **기능 분석**

  * `player.js`, `attackSystem.js`, `weaponSystem.js`, `collider.js`, `main.js` 코드 흐름 파악
  * 이동, 공격, 충돌, 무기 관리, 게임 루프 동작 방식 확인
* **리소스 구조 통일**

  * `resources/audio/` : 사운드 저장
  * `resources/effects/` : 시각 이펙트 리소스 저장
* **디렉터리 재구성**

  * 공격 시스템 및 무기 관리 코드 분리
  * 모듈화 및 코드 가독성 확보

**작업 예시:**

```plaintext
/public/
 ├── core/         # 엔진
 ├── player/       # 캐릭터
 ├── combat/       # 공격, 무기
 ├── ui/           # 사용자 인터페이스
 ├── resources/    # 오디오 및 이펙트
```

---

## 📌 **2. 전투 시스템 안정화**

**목표:** 근본적인 전투 시스템 신뢰성 확보 후 확장 준비.

### 2.1 근접 공격 판정 (부채꼴)

* 시야각/거리 기반 부채꼴 판정 함수 최적화
* 타격 타이밍에 맞춰 `attackSystem.triggerMeleeAttack()` 호출
* 디버그 모드에서 공격 판정 시각화

### 2.2 원거리 공격 판정 (구체형 투사체)

* 무기 속성에 따라 투사체 속도, 사거리 분기 처리
* 투사체 재사용 풀링 적용 (생성/제거 반복 최소화)
* 각 무기마다 탄속 / 크기 / 효과 차별화

### 2.3 무기 소환 제한

* `spawnedWeaponCount`로 총량 관리
* lifetime 대신 무기 풀링 및 재사용 방식 적용
* 무기 소환/수거 시 개수 관리 로직 추가

### 2.4 플레이어 충돌 처리

* 충돌 시 이동 벡터 보정 및 밀어내기 처리
* 서로 관통 방지

---

## 📌 **3. 사운드 시스템 구축**
`
**목표:** 전투 및 이동 피드백을 사운드로 제공하여 몰입도 향상.

* 공통 사운드 매니저 (`soundManager.js`) 개발
* 사운드 로드 및 캐싱, 재생 컨트롤 함수 구현
* 공격/피격/발사/점프/착지/사망 등 주요 이벤트에 삽입

---

## 📌 **4. 시각 효과 및 피드백 강화**

**목표:** 시각적 피드백 제공 및 액션 몰입감 개선.

* **공격 이펙트:** 휘두름 궤적, 총구 화염, 피격 스파크 등
* **파티클 시스템:** Three.js 기반 환경 파티클 배경 처리
* **피격 리액션:** 적 넉백/경직 등 반응 애니메이션 적용

---

+) 필요 조치
1. 이동 중 공격은 가능하지만, 공격 중 이동 시 공격을 중단하고 이동
2. 총 사격 시 총염 이펙트에 과부하가 있는 것으로 보임 << 즉 게임에 렉걸림
3. 총 투사체를 구체에서 폭 0.5의 직사각형으로 변경
4. 근접 무기의 휘두르는 궤적 표시 << 어려울 것으로 봄

## 📌 **5. 테스트 및 최적화**

**목표:** 시스템 안정성 검증 및 성능 최적화.

* 근접/원거리 공격 판정 테스트
* 사운드 동작 검증
* 시각 효과 출력 확인
* 충돌 및 무기 제한 로직 검증
* 성능 모니터링 후 필요 시 최적화

---

# 📋 **최종 작업 순서 (우선순위 기반)**

1️⃣ 전투 시스템 안정화
2️⃣ 무기 소환 제한 및 관리 최적화
3️⃣ 플레이어 충돌 처리
4️⃣ 사운드 시스템 적용
5️⃣ 시각 효과 및 피드백 강화
6️⃣ 테스트 및 디버깅
7️⃣ 폴더 구조 재편 및 코드 모듈화 (병행 추천)

---

# 🎯 **최종 목표**

* 신뢰성 있는 전투 시스템 구축
* 플레이어 체감 피드백 강화
* 코드 유지보수성 확보 및 확장 준비

---

## 💡 **추가 고려사항**

*   **멀티플레이어 환경 전환 (Socket.IO):** 향후 멀티플레이어 환경으로의 전환을 위해 Socket.IO와 같은 웹소켓 라이브러리 도입을 고려한다. 서버-클라이언트 통신, 게임 상태 동기화, 서버 권한 부여(Server Authoritative) 방식, 네트워크 지연 처리 등 멀티플레이어 아키텍처에 대한 이해와 준비가 필요하다. 이는 게임의 핵심 아키텍처에 큰 변화를 가져오므로, 초기 설계 단계부터 염두에 두는 것이 좋다.
*   **모듈 개발용 임시 폴더 활용:** 기존 코드의 안정성을 유지하면서 모듈화 작업을 진행하기 위해, 별도의 임시 개발 폴더(예: `public/dev_modules/` 또는 `src/`)를 생성하여 개선된 모듈들을 개발하고 테스트한다. 개발이 완료되고 안정성이 확보되면 기존 코드와 통합하거나 대체하는 방식으로 진행한다.

---


